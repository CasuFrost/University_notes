{
    "id": 66,
    "description": "Dato un AlberoBinario, ritorna la larghezza massima dell'albero, ovvero la differenza tra la posizione del nodo che si trova più a destra nell'albero e la posizione del nodo che si trova più a sinistra.",
    "text": "\n    Si definisca la funzione es17, ricorsiva (o che fa uso di vostre funzioni ricorsive) che:\n    - riceve come argomento un AlberoBinario (definito nel file albero.py)\n    \n    Calcola la \"larghezza massima\" dell'albero,  ovvero la differenza tra \n    la posizione del nodo che si trova piu' a destra nell'albero\n    e la posizione del nodo che si trova piu' a sinistra.\n    Per calcolare la posizione di un nodo rispetto alla radice (che assumiamo sia a posizione 0)\n    basta sottrarre 1 (uno) ogni volta che si scende su un sottoalbero sinistro\n    ed aggiungere 1 (uno) ogni volta che si scende su un sottoalbero destro.\n    Esempio: se l'albero e' quello qui sotto a sinistra le posizioni saranno quelle nell'albero a destra\n             1           .            0         .\n            / \\          .           / \\        .\n           2   3         .         -1   1       .\n          / \\            .        /  \\          .\n        4    5           .      -2    0         .\n       /    /            .      /    /          .\n      6    7             .    -3    -1          .\n       \\    \\            .      \\    \\          .\n        8    9           .      -2    0         .\n    Il nodo piu' a sinistra (6) e' a posizione -3\n    mentre quello piu' a destra (3) e' a posizione 1\n    Quindi la funzione torna il valore 4=1-(-3)\n",
    "algorithm": "Definiamo una funzione larghezza_albero(A, pos=0)\n\tdati un albero e la posizione del nodo nell'albero, ritorna la larghezza minima e massima dell'albero\n\tinizializza 4 variabili sx_m, sx_M, dx_m, dx_M a pos\n\tse l'albero ha figlio sinistro:\n\t\tsx_m, sx_M = larghezza_albero(A.sx, pos-1)\n\tse l'albero ha figlio destro:\n\t\tdx_s, dx_M = larghezza_aòbero(A.dx, pos+1)\nritorna il minimo tra (sx_m e dx_m), il massimo tra (sx_M e dx_M)\n\nes66(tree):\n\timposta m e M al risultato di larghezza_albero(tree)\n\tritorna M-m",
    "tags": ["Alberi", "Ricorsione"],
    "effort": 9,
    "clues": [],
    "from": "esame-12-7-18"
}